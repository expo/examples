diff --git a/node_modules/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js b/node_modules/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js
index c9bc9ea..cf4eebd 100644
--- a/node_modules/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js
+++ b/node_modules/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.development.js
@@ -2113,7 +2113,7 @@ function createModelReject(chunk) {
 function createServerReferenceProxy(response, metaData) {
   var callServer = response._callServer;
 
-  var proxy = function () {
+  var proxy = async function () {
     // $FlowFixMe[method-unbinding]
     var args = Array.prototype.slice.call(arguments);
     var p = metaData.bound;
@@ -2128,10 +2128,10 @@ function createServerReferenceProxy(response, metaData) {
     } // Since this is a fake Promise whose .then doesn't chain, we have to wrap it.
     // TODO: Remove the wrapper once that's fixed.
 
-
-    return Promise.resolve(p).then(function (bound) {
-      return callServer(metaData.id, bound.concat(args));
-    });
+    // HACK: This is required to make native server actions return a non-undefined value. 
+    // Seems like a bug in the Hermes engine since the same babel transforms work in Chrome/web.
+    const _bound = await p;
+    return callServer(metaData.id, _bound.concat(args));
   };
 
   registerServerReference(proxy, metaData);
diff --git a/node_modules/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.production.js b/node_modules/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.production.js
index 6a7df37..9a816c3 100644
--- a/node_modules/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.production.js
+++ b/node_modules/react-server-dom-webpack/cjs/react-server-dom-webpack-client.browser.production.js
@@ -696,18 +696,30 @@ function createModelReject(chunk) {
   };
 }
 function createServerReferenceProxy(response, metaData) {
-  function proxy() {
+  var callServer = response._callServer;
+
+  var proxy = async function () {
+    // $FlowFixMe[method-unbinding]
     var args = Array.prototype.slice.call(arguments),
       p = metaData.bound;
-    return p
-      ? "fulfilled" === p.status
-        ? callServer(metaData.id, p.value.concat(args))
-        : Promise.resolve(p).then(function (bound) {
-            return callServer(metaData.id, bound.concat(args));
-          })
-      : callServer(metaData.id, args);
-  }
-  var callServer = response._callServer;
+
+    if (!p) {
+      return callServer(metaData.id, args);
+    }
+
+    if (p.status === "fulfilled") {
+      var bound = p.value;
+      return callServer(metaData.id, bound.concat(args));
+    } 
+    // Since this is a fake Promise whose .then doesn't chain, we have to wrap it.
+    // TODO: Remove the wrapper once that's fixed.
+
+    // HACK: This is required to make native server actions return a non-undefined value. 
+    // Seems like a bug in the Hermes engine since the same babel transforms work in Chrome/web.
+    const _bound = await p;
+    return callServer(metaData.id, _bound.concat(args));
+  };
+
   knownServerReferences.set(proxy, metaData);
   return proxy;
 }
